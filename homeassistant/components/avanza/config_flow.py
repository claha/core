"""Config flow for Avanza integration."""
import pyavanza
import voluptuous as vol

from homeassistant import config_entries
from homeassistant.const import CONF_ID
from homeassistant.helpers.aiohttp_client import async_get_clientsession

from .const import DOMAIN  # pylint:disable=unused-import

DATA_SCHEMA_SEARCH = vol.Schema(
    {
        vol.Required(
            "instrument_type", default=pyavanza.InstrumentType.STOCK.value
        ): vol.In(
            [pyavanza.InstrumentType.STOCK.value, pyavanza.InstrumentType.FUND.value]
        ),
        vol.Required("query"): str,
    }
)


@config_entries.HANDLERS.register(DOMAIN)
class ConfigFlow(config_entries.ConfigFlow):  # , domain=DOMAIN):
    """Handle a config flow for Avanza."""

    VERSION = 1
    CONNECTION_CLASS = config_entries.CONN_CLASS_CLOUD_POLL

    async def async_step_user(self, user_input=None):
        """Handle the initial step."""
        errors = {}
        if user_input is not None:
            if "query" in user_input:
                session = async_get_clientsession(self.hass)
                query = user_input["query"]
                limit = 10
                instrument = pyavanza.InstrumentType[user_input["instrument_type"]]
                instruments = await pyavanza.search_async(
                    session, query, limit=limit, instrument=instrument
                )
                data_schema = vol.Schema(
                    {
                        vol.Required("instrument", default=str(instruments[0])): vol.In(
                            [str(instrument) for instrument in instruments]
                        ),
                    }
                )

                return self.async_show_form(
                    step_id="user", data_schema=data_schema, errors=errors
                )
            elif "instrument" in user_input:
                try:
                    if user_input[CONF_ID] in [
                        entry.data[CONF_ID]
                        for entry in self.hass.config_entries.async_entries(DOMAIN)
                    ]:
                        errors[CONF_ID] = "id_exists"
                    else:
                        return self.async_create_entry(title="title", data=user_input)
                except pyavanza.AvanzaResponseError:
                    errors[CONF_ID] = "id_invalid"
                except pyavanza.AvanzaRequestError:
                    errors[
                        "base"
                    ] = "unknown"  # use connect_error generated by scaffold?
                except pyavanza.AvanzaParseError:
                    errors[CONF_ID] = "type_mismatch"
                except Exception:  # pylint: disable=broad-except
                    errors["base"] = "unknown"

        return self.async_show_form(
            step_id="user", data_schema=DATA_SCHEMA_SEARCH, errors=errors
        )
